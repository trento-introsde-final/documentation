Web Services
==========================

Process Centric Services (SOAP)
--------------------------------
* **initializeUser** {Params: validation_code}: Given a validation_code generated by the system, fetches the user information from strava and performs the 1-to-1 mapping from telegram user-strava user.
* **checkGoalStatus** {Params: user_id}: Given a user_id checks the user’s progress with regards to his goals.
* **updateRunInfo** {Params: user_id}: Given a user_id fetches new runs from Strava and checks if any goals are met.

Business Logic Services (REST)
-------------------------------

* **GET** ``/goal-types/<goal-type>``
* **GET** ``/goal-types/<goal-type>``
* **GET** ``/user-id/<telegram-id>``
* **GET** ``/users`` {Params: validation_code}
* **GET** ``/users/<user-id>/goal-status``
* **POST** ``/users`` {Params: validation_code, strava_auth_code}
* **PUT** ``/users/<user-id>`` {telegram_user_id, telegram_chat_id}


Storage Services (REST)
------------------------

* **GET** ``/goal-types``
* **GET** ``/goal-types/<goal-type>``
* **POST** ``/users`` {Params: validation_code, strava_auth_code}
* **GET** ``/users`` {Params: validation_code}: Connects to AdapterServices and retrieves the user data from Strava.
* **PUT** ``/users/<user-id>`` {Params: telegram_user_id, telegram_chat_id}
* **GET** ``/user-id/<telegram-id>``
* **GET** ``/users/<user-id>/runs`` {Params: startDate, endDate}: Connects to LocalDatabaseService and gets all user’s runs within [startDate, endDate].
* **GET** ``/users/<user-id>/new-runs`` {Params: startDate}: Connects to LocalDatabaseService to fetch access_token, then fetches latest runs from Strava through the AdapterService, and returns the untracked runs in case there are any.
* **POST** ``/users/<user-id>/runs``:
* **GET** ``/users/<user-id>/goals``: Connects to LocalDatabaseService and gets all the goals for the user. 
* **PUT** ``/users/<id>/goal/<goal-type>``: 
* **GET** ``/pretty-pic``: connects to the adapterServices and returns 1 picture url.
* **GET** ``/motivation-quote``: connects to the adapterServices and returns 1 motivation quote.

Local Database Services (REST)
-------------------------------

* **POST** ``/users`` {Params: validation_code, strava_auth_code}

* **GET** ``/users`` {Params: validation_code}
* **PUT** ``/users/<user_id>``
* **PUT** ``/users/<user_id>`` {telegram_user_id,  telegram_chat_id}

* **GET** ``/goal-types``
* **GET** ``/goal-types/<goal-type>``
* **GET** ``/user-id/<telegram-id>``
* **PUT** ``/users/<user-id>/goals/<goal-type>`` {value}

* **GET** ``/user/<user-id>/goals``
* **GET** ``/user/<user-id>/runs``

* **GET** ``/user/<user-id>/access-token``
* **POST** ``/user/<user-id>/runs``



Adapter Services (REST)
------------------------

**GET** ``/instagram-pics`` 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Connects to instagram and gets latest pics that match a tag name.

	**Sample input**:

	.. code-block:: json
		
		{
			"tag": "tagName",
			"limit": 5
		}

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK|ERROR",
			"resultCount": 5,
			"results": [
				{
					"url": "http://instagram.com/.../12dsfzH.jpg",
					"thumbUrl": "http://instagram.com/.../12dsfzH.jpg"
				},
				...
			]
		}

**GET** ``/motivation-quote``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Gets a random inspirational quote.

	No input

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK|ERROR",
			"result": 
				{
					"quote":"There is time for everything, except for losing time.",
					"author":"Anonymous"
			]
		}

**GET** ``/strava-user-data/<code>``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Connects to Strava, through a POST request to retrieve the user access token, and the user profile. Returns it.

	No input

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK",
			"result": {
				"access_token": "83ebeabdec09f6670863766f792ead24d61fe3f9",
				"athlete": {
				"id": 227615,
				"resource_state": 3,
				"firstname": "John",
				"lastname": "Applestrava",
				"profile_medium": "http://pics.com/227615/medium.jpg",
				"profile": "http://pics.com/227615/large.jpg",
				"city": "San Francisco",
				"state": "California",
				"country": "United States",
				"sex": "M",
				"friend": null,
				"follower": null,
				"premium": true,
				"created_at": "2008-01-01T17:44:00Z",
				"updated_at": "2013-09-04T20:00:50Z",
				"follower_count": 273,
				"friend_count": 19,
				"mutual_friend_count": 0,
				"date_preference": "%m/%d/%Y",
				"measurement_preference": "feet",
				"email": "john@applestrava.com",
				"clubs": [ ],
				"bikes": [ ],
				"shoes": [ ]
			  }
		}

**GET** ``/recent-runs/<accessToken>`` 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Connects, and gets latest run information.
	
	**Sample input**:

	.. code-block:: json

		{
			"startDate": "1452811770"
		}

	**Sample output**:

	.. code-block:: json
		
		{
			"result": "OK",
			"results": [
				{
					"distance": 32486.1,
					"moving_time": 5241,
					"elapsed_time": 5427,
					"total_elevation_gain": 566.0,
					"start_date": "2013-08-24T00:04:12Z",
					"start_date_local": "2013-08-23T17:04:12Z",
					"timezone": "(GMT-08:00) America/Los_Angeles",
					"start_latlng": [
						37.793551,
						-122.2686
					],
					"end_latlng": [
						37.792836,
						-122.268287
					],
					
					"average_speed": 3.4,
					"max_speed": 4.514,
					"average_watts": 163.6,
					"max_watts": 754,
					"weighted_average_watts": 200,
					"kilojoules": 857.6,
					"device_watts": true,
					"average_heartrate": 138.8,
					"max_heartrate": 179.0,
					"average_speed": 3.4,
					"calories": 390.5
				}
			]
		}

