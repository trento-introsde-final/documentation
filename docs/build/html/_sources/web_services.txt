.. |br| raw:: html

   <br />


Web Services
=============

Process Centric Services (SOAP)
--------------------------------
**initializeUser** {Params: validation_code}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Given a validation_code generated by the system, fetches the user information from strava and performs the 1-to-1 mapping from telegram user-strava user.

**checkGoalStatus** {Params: user_id}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Given a user_id checks the user’s progress with regards to his goals.

**updateRunInfo** {Params: user_id}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Given a user_id fetches new runs from Strava and checks if any goals are met.




Business Logic Services (REST)
-------------------------------

**GET** ``/goal-types``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	Gets all the valid goal types.

	No input

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**resuts**             **Array** of `Goal Type` |br|
						   Each string is a goal type.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.
	====================   =====================================

	GoalType object:

	====================   =============================================================
	**name**               **string** |br| Goal type name (e.g. 'distance', 'calories').
	**units**              **string** |br| (e.g. 'meters', 'kcal').         
	====================   =============================================================
	
	**Sample output**:

	.. code-block:: json

		{
			"status": "OK",
			"results": [
				{
					"id": "distance",
					"name": "Distance"
				},
				{	"id": "calories",
					"name": "Calories"
				},
				{
					"id": "max_speed",
					"name": "Maximum speed"
				}
			]
		}

**GET** ``/goal-types/<goal-type>``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	Gets the definition of a specific goal type.

	No input.

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.
	**id**                 **string**
	**name**               **string**
	**units**              **string**
	====================   =====================================
	
	**Sample output**:

	.. code-block:: json

		{
			"status": "OK",
			"id": "max_speed",
			"name": "Maximum Speed",
			"units": "km/h"
		}

**GET** ``/user-id/<slack-id>``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	Given a user's slack id, returns the corresponding user id.

	No input.

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.
	**id**                 **integer**
	====================   =====================================
	
	**Sample output**:

	.. code-block:: json

		{
			"status": "OK",
			"id": 5
		}


**GET** ``/users/<user-id>/goal-status``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	Returns the status for all the user's goals in the current period.

	No input.

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.
	**goalStatus**         **Array of `GoalStatus`**
	====================   =====================================
	
	GoalStatus object:

	====================   ======================================
	**type**               **string** |br| Goal id
	**name**               **string** |br| Goal name 
	                       (e.g. Distance, Max. Speed)
	**units**              **string**         
	**target**             **float** |br| The ammount the user 
	                       wants to achieve in total.
	**period**             **string**
	                       e.g. daily, weekly
	**periodStart**        **integer** |br| UNIX epoch timestamp.
	**periodEnd**          **integer** |br| UNIX epoch timestamp.             
	**goalMet**            **boolean** 
	**count**              **float** |br|
	                       How much user already accumulated for
	                       goal.
	====================   ======================================

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK",
			"goalStatus": [
				{
					"type": "distance",
					"name": "Distance",
					"units": "m"
					"target": 5000.00
					"period": "weekly",
					"periodStart": 1452941107,
					"periodEnd": 1453545907
					"goalMet": false,
					"count": 3500.00
				}
			]
		}


**POST** ``/users`` 
^^^^^^^^^^^^^^^^^^^^

	Creates a new user

	HTTP Status code: 200, 404 (Code not found) 

	**Parameters**

	====================   ===============================================================
	**slack_user_id**      **string** |br|    
	====================   ===============================================================


	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.                  
	====================   =====================================

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK",
		}


**PUT** ``/users/<user-id>`` 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	Update a user's profile with his slack user credentials.

	HTTP status code: 200 (OK), 400 (User doesn't exist)

	**Parameters**:
	
	====================   ===============================================================
	**slack_user_id**      **integer** |br| 
	                       Check `Slack API 
	                       <https://api.slack.com/>`_. 
	====================   ===============================================================


	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.                  
	====================   =====================================

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK",
		}





		

Storage Services (REST)
------------------------

**GET** ``/goal-types``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	No input.

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.  
	**results**            **Array of GoalType**     
	====================   =====================================

	GoalType object:

	====================   =============================================================
	**name**               **string** |br| Goal type name (e.g. 'distance', 'calories').
	**units**              **string** |br| (e.g. 'meters', 'kcal').         
	====================   =============================================================

**GET** ``/goal-types/<goal-type>``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	No input.

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.  
	**result**             **GoalType**     
	====================   =====================================

**POST** ``/users`` {Params: validation_code, strava_auth_code}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**GET** ``/users`` {Params: validation_code}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Connects to AdapterServices and retrieves the user data from Strava.

**PUT** ``/users/<user-id>`` {Params: telegram_user_id, telegram_chat_id}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**GET** ``/user-id/<telegram-id>``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**GET** ``/users/<user-id>/runs`` {Params: startDate, endDate}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Connects to LocalDatabaseService and gets all user’s runs within [startDate, endDate].

**GET** ``/users/<user-id>/new-runs`` {Params: startDate}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Connects to LocalDatabaseService to fetch access_token, then fetches latest runs from Strava through the AdapterService, and returns the untracked runs in case there are any.

**POST** ``/users/<user-id>/runs``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**GET** ``/users/<user-id>/goals``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Connects to LocalDatabaseService and gets all the goals for the user. 

**PUT** ``/users/<id>/goal/<goal-type>``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

**GET** ``/pretty-pic`` 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Connects to the adapterServices and returns 1 picture url.

	**Parameters**:

	====================   ============================================
	**tag**                **string** |br| Instagram tag to search for.
	**limit**              **integer** `optional` |br| Max 
	                       images to
	                       retrieve. Default is 5.
	====================   ============================================

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**resuts**             **Array** of `Images`
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.
	**results.url**        **string** |br| path to image.
	**results.thumbUrl**   **string** |br| path to thumbnail.
	====================   =====================================
	
	**Sample input**:

	.. code-block:: json
		
		{
			"tag": "tagName",
			"limit": 5
		}

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK|ERROR",
			"picture":
				{
					"url": "http://instagram.com/.../12dsfzH.jpg",
					"thumbUrl": "http://instagram.com/.../12dsfzH.jpg"
				}
		}

**GET** ``/motivation-quote``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Connects to the adapterServices and returns 1 motivation quote.

	No input

	**Output**:

	========================   =====================================
	**status**                 **string** |br| 
	                           ERROR if there was a problem. 
	                           |br| OK otherwise.
	**resut**                  **Object** 
	**error**                  **string** |br|
	                           Message describing encountered
	                           errors.
	**result.access_token**    **string** |br| Authentication token
	**result.athlete**         **Object** |br| User profile
	========================   =====================================

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK|ERROR",
			"result": 
			{
				"quote":"There is time for everything, except for losing time.",
				"author":"Anonymous"
			}
		}



Local Database Services (REST)
-------------------------------

**POST** ``/users``
^^^^^^^^^^^^^^^^^^^^

    Creates a new user in the database
    
    **Parameters**:

    ========================   =====================================
    **slack_user_id**	       **string** |br| Generated by Slack.
    ========================   =====================================

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.                  
	====================   =====================================

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK|ERROR",
		}


**PUT** ``/users/<user_id>`` 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

..	Performs a partial update on the user's fields. Either his profile data,
	or his telegram identifiers. Only the passed fields are updated. The user
	identified by <user_id> must already exist.

	**Parameters**:

	========================   =====================================
	**slack_user_id**          **string**
	**email**                  **string**
	**firstname**              **string**
	**lastname**               **string**
	========================   =====================================

	No output.


**GET** ``/goal-types``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	No input.

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.  
	**results**            **Array of GoalType**     
	====================   =====================================

	GoalType object:

	====================   =============================================================
	**name**               **string** |br| Goal type name (e.g. 'distance', 'calories').
	**units**              **string** |br| (e.g. 'meters', 'kcal').         
	====================   =============================================================

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK",
			"results": [
				{
					"id": "distance",
					"name": "Distance"
				},
				{	"id": "calories",
					"name": "Calories"
				},
				{
					"id": "max_speed",
					"name": "Maximum speed"
				}
			]
		}

**GET** ``/goal-types/<goal-type>``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	No input.

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.  
	**result**             **GoalType**     
	====================   =====================================

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK",
			"id": "max_speed",
			"name": "Maximum Speed",
			"units": "km/h"
		}

**GET** ``/user-id/<slack-id>``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Given the slack identifier of the user, returns the corresponding id used by
this system to identify the user.

 	No input.

 	**Output**:

 	====================   =====================================
	**id**                 **integer**   
	====================   =====================================

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK",
			"id": 5
		}


**PUT** ``/users/<user-id>/goals/<goal-type>``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sets a goal of the specified type for the specified user.

	**Parameters**:

	====================   ===================================================
	**target**             **float** |br| Target goal value.
	**period**             **string** |br| (e.g. 'weekly', 'daily', 'monthly')         
	====================   ===================================================

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.       
	====================   =====================================

	**Sample input**:

	.. code-block:: json

		{
			"target": 2000,
			"period": "daily"
		}

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK|ERROR",
		}


**GET** ``/user/<user-id>/goals``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Gets all the goals for the specified user.

	No input.

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.
	**goals**              **Array** of `Goal`         
	====================   =====================================

	Goal object:

	====================   ===================================================
	**id**                 **integer**
	**created**            **integer** |br| UNIX epoch timestamp.
	**target**             **float** |br| Target goal value.
	**period_days**        **integer** |br| How long does the period measure.
	**period**             **string** |br| (e.g. 'weekly', 'daily', 'monthly')               
	**measure_type**       **float** |br| meters                   
	**units**              **float** |br| meters per second                   
	====================   ===================================================

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK",
			"goals": [
				{
					"id": 2,
					"created": 1454512708,
					"target": 5000.00,
					"measure_type": "distance",
					"name": "Distance",
					"units": "m",
					"period": "weekly",
					"period_days": 7
				},
				...
			]
		}

**GET** ``/user/<user-id>/runs``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Gets all the recent runs for the specified user.

	**Parameters**:

	====================   ============================================
	**start_date**         **integer** |br| UNIX timestamp.          
	====================   ============================================

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.
	**runs**               **Array** of `Run`         
	====================   =====================================

	Run object:

	====================   ============================================
	**id**                 **integer**
	**distance**           **float** |br| meters
	**calories**           **float** |br| kilocalories
	**start_date**         **time string**
	**moving_time**        **integer** |br| seconds               
	**elevation_gain**     **float** |br| meters                   
	**max_speed**          **float** |br| meters per second              
	**avg_speed**          **float** |br| meters per second              
	====================   ============================================

	**Sample input**:

	.. code-block:: json

		{
			"start_date": 1454512708
		}

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK",
			"runs": [
				{
					"id": 2,
					"distance": 5000,
					"calories": 3000,
					"start_date": 1454512708,
					"moving_time": 1800,
					"elevation_gain": 200,
					"max_speed": 3,
					"avg_speed": 2.5
				},
				...
			]
		}

**POST** ``/user/<user-id>/runs``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Saves the passed run information in the RUN_HISTORY table.

	**Parameters**:

	====================   ============================================
	**distance**           **float** |br| meters
	**calories**           **float** |br| kilocalories
	**start_date**         **time string**
	**moving_time**        **integer** |br| seconds               
	**elevation_gain**     **float** |br| meters                   
	**max_speed**          **float** |br| meters per second              
	**avg_speed**          **float** |br| meters per second              
	====================   ============================================

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.
	====================   =====================================

	**Sample input**:

	.. code-block:: json

		{
			"distance": 5000,
			"calories": 3000,
			"start_date": 1454512708,
			"moving_time": 1800,
			"elevation_gain": 200,
			"max_speed": 3,
			"avg_speed": 2.5
		}

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK|ERROR"
		}

Adapter Services (REST)
------------------------

**GET** ``/instagram-pics`` 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Connects to instagram and gets latest pics that match a tag name.

	**Parameters**:

	====================   ============================================
	**tag**                **string** |br| Instagram tag to search for.
	**limit**              **integer** `optional` |br| Max 
	                       images to
	                       retrieve. Default is 5.
	====================   ============================================

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem. 
	                       |br| OK otherwise.
	**resuts**             **Array** of `Images`
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.
	**results.url**        **string** |br| path to image.
	**results.thumbUrl**   **string** |br| path to thumbnail.
	====================   =====================================
	
	**Sample input**:

	.. code-block:: json
		
		{
			"tag": "tagName",
			"limit": 5
		}

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK|ERROR",
			"resultCount": 5,
			"results": [
				{
					"url": "http://instagram.com/.../12dsfzH.jpg",
					"thumbUrl": "http://instagram.com/.../12dsfzH.jpg"
				},
				...
			]
		}

**GET** ``/motivation-quote``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Gets a random inspirational quote.

	No input

	**Output**:

	========================   =====================================
	**status**                 **string** |br| 
	                           ERROR if there was a problem. 
	                           |br| OK otherwise.
	**resut**                  **Object** 
	**error**                  **string** |br|
	                           Message describing encountered
	                           errors.
	**result.access_token**    **string** |br| Authentication token
	**result.athlete**         **Object** |br| User profile
	========================   =====================================

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK|ERROR",
			"result": 
			{
				"quote":"There is time for everything, except for losing time.",
				"author":"Anonymous"
			}
		}

**GET** ``/strava-user-data/<auth_code>``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Connects to Strava, through a POST request to retrieve the user access token, and the user profile. Returns it.
This is the final step of the OAuth token exchange process.

	No input

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if the request encountered a
	                       problem. 
	                       |br| OK otherwise.
	**resut**              **Object** AthleteProfile
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.
	====================   =====================================

	AthleteProfile:

	========================   =====================================
	**access_token**           **string** |br| Authentication token
	**athlete**                **Object** |br| User profile
	========================   =====================================

	**Sample output**:

	.. code-block:: json

		{
			"status": "OK",
			"result": {
				"access_token": "83ebeabdec09f6670863766f792ead24d61fe3f9",
				"athlete": {
					"id": 227615,
					"resource_state": 3,
					"firstname": "John",
					"lastname": "Applestrava",
					"profile_medium": "http://pics.com/227615/medium.jpg",
					"profile": "http://pics.com/227615/large.jpg",
					"city": "San Francisco",
					"state": "California",
					"country": "United States",
					"sex": "M",
					"friend": null,
					"follower": null,
					"premium": true,
					"created_at": "2008-01-01T17:44:00Z",
					"updated_at": "2013-09-04T20:00:50Z",
					"follower_count": 273,
					"friend_count": 19,
					"mutual_friend_count": 0,
					"date_preference": "%m/%d/%Y",
					"measurement_preference": "feet",
					"email": "john@applestrava.com",
					"clubs": [ ],
					"bikes": [ ],
					"shoes": [ ]
				  }
			}		
		}

**GET** ``/recent-runs/<accessToken>`` 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Connects, and gets latest run information.

	**Parameters**:

	====================   =====================================
	**start_date**          **integer** |br| UNIX timestamp.
	                        Will retrieve runs more recent than
	                        this.
	====================   =====================================

	**Output**:

	====================   =====================================
	**status**             **string** |br| 
	                       ERROR if there was a problem
	                       connecting to Strava. 
	                       |br| OK otherwise.
	**resuts**             **Array** of `Run`
	**error**              **string** |br|
	                       Message describing encountered
	                       errors.
	====================   =====================================

	Run object:

	========================   =====================================
	**distance**               **float** |br| meters
	**moving_time**            **integer** |br| seconds
	**total_elevation_gain**   **float** |br| meters
	**start_date**             **time string**
	**start_date_local**       **time string**
	**timezone**               **string**
	**average_speed**          **float** |br| meters per second
	**max_speed**              **float** |br| meters per second
	**calories**               **float** |br| kilocalories
	========================   =====================================

	
	**Sample input**:

	.. code-block:: json

		{
			"start_date": 1452811770
		}

	**Sample output**:

	.. code-block:: json
		
		{
			"status": "OK",
			"results": [
				{
					"distance": 32486.1,
					"moving_time": 5241,
					"total_elevation_gain": 566.0,
					"start_date": "2013-08-24T00:04:12Z",
					"start_date_local": "2013-08-23T17:04:12Z",
					"timezone": "(GMT-08:00) America/Los_Angeles",
					"average_speed": 3.4,
					"max_speed": 4.514,
					"calories": 390.5
				}
			]
		}

